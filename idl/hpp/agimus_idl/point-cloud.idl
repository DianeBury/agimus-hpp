// Copyright 2021, 2022, CNRS, Airbus SAS

// Author: Florent Lamiraux

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:

// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.

// 2. Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following
// disclaimer in the documentation and/or other materials provided
// with the distribution.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
// OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef HPP_AGIMUS_IDL_POINT_CLOUD_IDL
#define HPP_AGIMUS_IDL_POINT_CLOUD_IDL

#include <hpp/common.idl>

module hpp {
  module agimus_idl {
    interface PointCloud {
      HPP_EXPOSE_MEMORY_DEALLOCATION(Error)
      boolean initializeRosNode (in string name, in boolean anonymous)
      raises (Error);
      void    shutdownRos () raises (Error);
      /// Get point cloud from ROS topic
      /// \param topic name of the topic,
      /// \param timeOut time after which the function returns error if no data
      ///        has been published (in seconds).
      /// \param topic name of the topic, should be of type
      ///        sensor_msgs/PointCloud2
      /// \param joint joint to which the point cloud is attached.
      ///        point cloud has been read.
      boolean getPointCloud(in string joint, in string topic, in double timeOut)
      raises (Error);
    }; // interface PointCloud
  }; // module agimus_idl
}; // module hpp
//* #include <hpp/agimus/point-cloud.hh>

#endif // HPP_AGIMUS_IDL_POINT_CLOUD_IDL
